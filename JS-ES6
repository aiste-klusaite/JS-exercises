/*
Suppose that you're working in a small town administration, and you're in charge of two town elements:
1. Parks
2. Streets

It's a very small town, so right now there are only 3 parks and 4 streets. All parks and streets have a name and a build year.

At an end-of-year meeting, your boss wants a final report with the following:
1. Tree density of each park in the town (forumla: number of trees/park area)
2. Average age of each town's park (forumla: sum of all ages/number of parks)
3. The name of the park that has more than 1000 trees
4. Total and average length of the town's streets
5. Size classification of all streets: tiny/small/normal/big/huge. If the size is unknown, the default is normal

All the report data should be printed to the console.
*/
class build{
    constructor(name, yearOfBuild){
        this.name = name;
        this.yearOfBuild = yearOfBuild;
    }
}

class parks extends build{
    constructor(name, yearOfBuild, treeNumber, parkArea){
        super(name, yearOfBuild);
        this.treeNumber = treeNumber;
        this.parkArea = parkArea;
    }
    treeDensity(){
        let density = this.treeNumber/this.parkArea;
        console.log(`${this.name} has ${density} trees per square`);
    }

}

class streets extends build{
     constructor(name, yearOfBuild, lengthStr, size = 3) {
         super(name, yearOfBuild);
         this.lengthStr = lengthStr;
         this.size = size;
     }
    classStreets(){
        const streetSize = new Map();
        streetSize.set(1, 'tiny');
        streetSize.set(2, 'small');
        streetSize.set(3, 'normal');
        streetSize.set(4, 'big');
        streetSize.set(5, 'huge');
        console.log(`${this.name}, build in ${this.yearOfBuild} and it is ${streetSize.get(this.size)} street`);
    }
}

const allParks = [
    new parks ('Green Park', 1935, 500, 3),
    new parks ('Yellow Park', 1965, 360, 2),
    new parks ('Red Park', 1922, 700, 5)
];

const allStreets = [
    new streets ('Main street', 1920, 10, 5),
    new streets ('City street', 1958, 3, 2),
    new streets ('Boulevard', 1985, 5),
    new streets ('district street', 1920, 7, 4)
]
 

function calc(array){
    
    const sum = array.reduce((prev, curr, index) => prev + curr, 0);
    return [sum, sum / array.length];
}


function parkReport(p) {
   
    //density
    p.forEach(el => el.treeDensity());
    //average age of parks
    const ages = p.map(el => new Date().getFullYear() - el.yearOfBuild);
    const[totalAge, aveAge] = calc(ages);
    console.log(` All of ${p.length} our parks are ${aveAge} yo`);
    // which park has more than 170 trees per square
    const a = p.map(el => el.treeNumber).findIndex(el => el > 600);
    console.log(`${p[a].name} has more than 600 trees`);
}

function streetReport(s){
   //street length
    const[totalLength, aveLength] = calc(s.map(el => el.lengthStr));
    console.log(`all of our ${s.length} streets are ${totalLength} km and with an average of ${aveLength} km`);
    //classify streets
    s.forEach(el => el.classStreets());
}
    
parkReport(allParks);
streetReport(allStreets);
